/*  AMXX Scripts Generated by Poznamkovy Blok :* */
#include <amxmodx>
#include <amxmisc>

enum _:BanEnums
{
	sxDovod[64], sxCas, sxTyp[10], sxCat
}

new BanReasons[64][BanEnums];
new BanCategories[64][64];
new addCalc;

public plugin_init() {
	register_plugin("Ban menu from file", "0.1", "ReeG");
	
	register_concmd("test_menu", "BanMenu");

	load_banmenu();
	log_amx("Ban menu from File by ReeG [steamcommunity.com/id/reeg-ru] loaded.");
}

public BanMenu(id) {
	new menu = menu_create("\rBan menu^n\yVyber kategorie \d", "BanMenu_handle");

	new szItem[32];
	for(new i = 0; i < sizeof(BanCategories); i++) {
		if(BanCategories[i][0] != 0) {
			formatex(szItem, charsmax(szItem), "%s", BanCategories[i]);
			replace_all(szItem, charsmax(szItem), "#", "");
			menu_additem(menu, szItem);
		}
	}

	menu_setprop(menu, MPROP_BACKNAME, "Zpet");
	menu_setprop(menu, MPROP_NEXTNAME, "Dalsie")
	menu_setprop(menu, MPROP_EXITNAME, "Zavriet");
	menu_display(id, menu, 0);

	return PLUGIN_HANDLED;
}
public BanMenu_handle(id, menu, item) {
	if(item == MENU_EXIT) {
		menu_destroy(menu);
		return PLUGIN_HANDLED;
	}

	BanMenuNext(id, item);
	return PLUGIN_HANDLED;
}

public calcTime(minutes) {
	new szFormat[32];

	if(minutes == 0) {
		formatex(szFormat, charsmax(szFormat), "navzdy");
		return szFormat;
	}

	new hodiny = minutes/60;
	new minuty = minutes%60;
	//new dni = hodiny%24;

	if(hodiny < 1) {
		formatex(szFormat, charsmax(szFormat), "%imin", minutes);
		return szFormat;
	}

	if(minuty < 1) {
		formatex(szFormat, charsmax(szFormat), "%ih", hodiny);
		return szFormat;
	}

	formatex(szFormat, charsmax(szFormat), "%ih & %im", hodiny, minuty);
	return szFormat;
}

public BanMenuNext(id, type) {
	new menu = menu_create("\rBan menu^n\yVyber banu\d", "BanMenuNext_handle");

	addCalc = type;
	new szItem[84];
	for(new i = 0; i < sizeof(BanReasons); i++) {
		if(BanReasons[i][sxCat] == type && BanReasons[i][sxDovod] != 0) {
			formatex(szItem, charsmax(szItem), "%s - \y%s^t\d[%s]", BanReasons[i][sxDovod], calcTime(BanReasons[i][sxCas]), BanReasons[i][sxTyp]);
			menu_additem(menu, szItem);
		}
	}

	menu_setprop(menu, MPROP_BACKNAME, "Zpet");
	menu_setprop(menu, MPROP_NEXTNAME, "Dalsie")
	menu_setprop(menu, MPROP_EXITNAME, "Zavriet");
	menu_display(id, menu, 0);
	return PLUGIN_HANDLED;
}
public BanMenuNext_handle(id, menu, item) {
	if(item == MENU_EXIT) {
		menu_destroy(menu);
		return PLUGIN_HANDLED;
	}

	new countWithMe = (addCalc > 0 ? item : 0);
	while(BanReasons[item][sxCat] != addCalc) item++;

	client_print(id, print_console, "%i - %s", item+countWithMe, BanReasons[item+countWithMe][sxDovod]);

	return PLUGIN_HANDLED;
}

public load_banmenu() {
    new path[128];
    get_configsdir(path, charsmax(path));
    
    format(path, charsmax(path), "%s/ban_menu.ini", path);
    
    if (file_exists(path))
    {
		new szLineData[33], iLine, iCat;

		new file = fopen(path, "rt");
		
		if (!file) return;
		
		while (!feof(file))
		{
			fgets(file, szLineData, charsmax(szLineData));
			
			replace(szLineData, charsmax(szLineData), "^n", "");
			
			if (szLineData[0] == ';' || !szLineData[0]) continue;

			if(szLineData[0] == '#') {
				BanCategories[iCat] = szLineData;
				log_amx("Nacitana kategoria do ban menu: %s [ID: %i]", BanCategories[iCat][0], iCat);
				iCat++;
				iLine++;

				continue;
			}

			// "Dovod" "Cas" "Typ"
			new szDovod[48] , szCas[18], szTyp[10];
			new CalcLine = iLine - iCat;
			parse(szLineData, szDovod, charsmax(szDovod), szCas, charsmax(szCas), szTyp, charsmax(szTyp));

			BanReasons[CalcLine][sxDovod] = szDovod;
			BanReasons[CalcLine][sxCas] = str_to_num(szCas);
			BanReasons[CalcLine][sxTyp] = szTyp;
			BanReasons[CalcLine][sxCat] = (iCat - 1);
			
			iLine++;
		}
		
		fclose(file);
	
    } else log_amx("Nenasiel sa 'ban_menu.ini' subor! Ziadne kategorie banov neboli nacitane.");
}